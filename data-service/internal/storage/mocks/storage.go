// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage.go

// Package mockstorage is a generated GoMock package.
package mockstorage

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.ozon.dev/davidokk/reminder-manager/data-service/internal/models"
)

// MockRemindersStorage is a mock of RemindersStorage interface.
type MockRemindersStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRemindersStorageMockRecorder
}

// MockRemindersStorageMockRecorder is the mock recorder for MockRemindersStorage.
type MockRemindersStorageMockRecorder struct {
	mock *MockRemindersStorage
}

// NewMockRemindersStorage creates a new mock instance.
func NewMockRemindersStorage(ctrl *gomock.Controller) *MockRemindersStorage {
	mock := &MockRemindersStorage{ctrl: ctrl}
	mock.recorder = &MockRemindersStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemindersStorage) EXPECT() *MockRemindersStorageMockRecorder {
	return m.recorder
}

// CreateReminder mocks base method.
func (m *MockRemindersStorage) CreateReminder(ctx context.Context, date time.Time, text string) (*models.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReminder", ctx, date, text)
	ret0, _ := ret[0].(*models.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReminder indicates an expected call of CreateReminder.
func (mr *MockRemindersStorageMockRecorder) CreateReminder(ctx, date, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReminder", reflect.TypeOf((*MockRemindersStorage)(nil).CreateReminder), ctx, date, text)
}

// GetReminder mocks base method.
func (m *MockRemindersStorage) GetReminder(ctx context.Context, id uint64) (*models.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReminder", ctx, id)
	ret0, _ := ret[0].(*models.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReminder indicates an expected call of GetReminder.
func (mr *MockRemindersStorageMockRecorder) GetReminder(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReminder", reflect.TypeOf((*MockRemindersStorage)(nil).GetReminder), ctx, id)
}

// ListReminders mocks base method.
func (m *MockRemindersStorage) ListReminders(ctx context.Context) ([]*models.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReminders", ctx)
	ret0, _ := ret[0].([]*models.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReminders indicates an expected call of ListReminders.
func (mr *MockRemindersStorageMockRecorder) ListReminders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReminders", reflect.TypeOf((*MockRemindersStorage)(nil).ListReminders), ctx)
}

// RemoveReminder mocks base method.
func (m *MockRemindersStorage) RemoveReminder(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReminder", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReminder indicates an expected call of RemoveReminder.
func (mr *MockRemindersStorageMockRecorder) RemoveReminder(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReminder", reflect.TypeOf((*MockRemindersStorage)(nil).RemoveReminder), ctx, id)
}

// UpdateReminder mocks base method.
func (m *MockRemindersStorage) UpdateReminder(ctx context.Context, id uint64, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReminder", ctx, id, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReminder indicates an expected call of UpdateReminder.
func (mr *MockRemindersStorageMockRecorder) UpdateReminder(ctx, id, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReminder", reflect.TypeOf((*MockRemindersStorage)(nil).UpdateReminder), ctx, id, text)
}
